    package com.anotherspectrum.anotherlibrary.menu;
        
        import com.anotherspectrum.anotherlibrary.menu.item.ClickableItem;
        import com.anotherspectrum.anotherlibrary.menu.pagination.Pagination;
        import com.anotherspectrum.anotherlibrary.utils.StringUtil;
        import lombok.Getter;
        import org.bukkit.Bukkit;
        import org.bukkit.Material;
        import org.bukkit.entity.Player;
        import org.bukkit.event.inventory.InventoryClickEvent;
        import org.bukkit.event.inventory.InventoryCloseEvent;
        import org.bukkit.event.inventory.InventoryDragEvent;
        import org.bukkit.event.inventory.InventoryOpenEvent;
        import org.bukkit.inventory.Inventory;
        import org.bukkit.inventory.ItemStack;
        
        import java.util.*;
        import java.util.function.Consumer;
        
        /**
        * 해당 클래스를 사용하면 메뉴를 간편하게 제작할 수 있습니다.
        *
        * @author Tainted_FrameWork and Tall edit for Else_JunSuk
        * @since 0.1.0 - UPDATE FOR 0.3.0
        */
        public class MenuManager {
        
        private static final Map<UUID, MenuManager> openMenus = new HashMap<>();
        
        private @Getter
        final Map<ItemStack, ClickableItem> menuClickActions = new HashMap<>();
        
        private Pagination pagination;
        
        private MenuClick generalInvClickAction;
        private MenuDrag generalDragAction;
        private MenuOpen openAction;
        private MenuClose closeAction;
        
        public final UUID uuid;
        private @Getter
        final Inventory inventory;
        
        private @Getter
        final int rows;
        
        public MenuManager(int rows, String name) {
        this.rows = rows;
        this.uuid = UUID.randomUUID();
        this.inventory = Bukkit.createInventory(null, rows * 9, StringUtil.format(name));
        }
        
        public void open(Player player) {
        player.openInventory(inventory);
        openMenus.put(player.getUniqueId(), this);
        if (openAction != null) openAction.open(player);
        }
        
        public void open(Player player, int page) {
        player.openInventory(inventory);
        openMenus.put(player.getUniqueId(), this);
        if (openAction != null) openAction.open(player);
        if (pagination != null) pagination.getPage(page);
        }
        
        public void remove() {
        openMenus.entrySet().removeIf(entry -> {
        if (entry.getValue().getUuid().equals(uuid)) {
        Player player = Bukkit.getPlayer(entry.getKey());
        if (player != null) {
        if (closeAction != null) closeAction.close(player);
        }
        return true;
        }
        return false;
        });
        }
        
        public UUID getUuid() {
        return uuid;
        }
        
        public void close(Player player) {
        player.closeInventory();
        openMenus.entrySet().removeIf(entry -> {
        if (entry.getKey().equals(player.getUniqueId())) {
        if (closeAction != null) closeAction.close(player);
        return true;
        }
        return false;
        });
        }
        
        /**
        * 해당 아이템에 부여된 클릭 이벤트를 반환합니다.
        *
        * @param item 타겟 아이템
        * @return {@link InventoryClickEvent} 인자를 포함한 {@link Consumer} 컬렉션
        */
        public ClickableItem getAction(ItemStack item) {
        return menuClickActions.getOrDefault(item, null);
        }
        
        /**
        * 해당 슬롯에 이미 아이템이 존재하는지 반환합니다.
        *
        * @param rawSlot 타겟 슬롯
        * @return {@link Boolean}
        */
        public boolean hasItem(int rawSlot) {
        return inventory.getItem(rawSlot) != null;
        }
        
        public void setPagination(PaginationSetting setting) {
        this.pagination = new Pagination.Impl();
        setting.setting(pagination);
        }
        
        public interface PaginationSetting {
        void setting(Pagination pagination);
        }
        
        public void setGeneralInvClickAction(MenuClick generalInvClickAction) {
        this.generalInvClickAction = generalInvClickAction;
        }
        
        public MenuClick getGeneralInvClickAction() {
        return generalInvClickAction;
        }
        
        public void setGeneralDragAction(MenuDrag generalDragAction) {
        this.generalDragAction = generalDragAction;
        }
        
        public MenuDrag getGeneralDragAction() {
        return generalDragAction;
        }
        
        public void setOpenAction(MenuOpen openAction) {
        this.openAction = openAction;
        }
        
        public MenuOpen getOpenAction() {
        return openAction;
        }
        
        public void setCloseAction(MenuClose closeAction) {
        this.closeAction = closeAction;
        }
        
        public MenuClose getCloseAction() {
        return closeAction;
        }
        
        public interface MenuClick {
        void click(Player player, InventoryClickEvent event);
        }
        
        public interface MenuDrag {
        void drag(Player player, InventoryDragEvent event);
        }
        
        public interface MenuOpen {
        void open(Player player);
        }
        
        public interface MenuClose {
        void close(Player player);
        }
        
        /**
        * 인벤토리에 아이템을 세팅하고 해당 아이템에 이벤트를 부여합니다.
        *
        * @param slot 세팅할 Raw 슬롯
        * @param item 세팅할 {@link ClickableItem} 아이템
        */
        public void setItem(int slot, ClickableItem item) {
        inventory.setItem(slot, item.getItem());
        menuClickActions.put(item.getItem(), item);
        }
        
        /**
        * 현재 플레이어에게 오픈된 인벤토리를 불러오고
        * 해당 인벤토리를 수정할 수 있습니다.
        *
        * @param player 타겟 플레이어
        * @return {@link MenuManager}
        */
        public static MenuManager getMenu(Player player) {
        return openMenus.getOrDefault(player.getUniqueId(), null);
        }
        
        /**
        * 인벤토리의 rows 를 계산하고
        * 테두리(보더)를 해당 아이템으로 채웁니다.
        * <p>Help by Gy_o, qawaea, kyominna</p>
        *
        * @param fillItem
        */
        public void fillBorders(ItemStack fillItem) {
        this.fillRows(1, fillItem);
        this.fillRows(rows, fillItem);
        this.fillColumn(1, fillItem);
        this.fillColumn(9, fillItem);
        }
        
        /**
        * 인벤토리 특정한 rows 를 해당 아이템으로 채웁니다.
        * <p>Help by Gy_o, qawaea, kyominna</p>
        *
        * @param row
        * @param fillItem
        */
        public void fillRows(int row, ItemStack fillItem) {
        if ((row > rows) || row < 1) return;
        for (int i = (row - 1) * 9; i <= ((row * 9) - 1); i++)
        inventory.setItem(i, fillItem);
        }
        
        /**
        * 인벤토리의 특정한 columns 를 해당 아이템으로 채웁니다.
        * <p>Help by Gy_o, qawaea, kyominna</p>
        *
        * @param column
        * @param fillItem
        */
        public void fillColumn(int column, ItemStack fillItem) {
        if (column < 1) return;
        for (int i = (column - 1); i < (column - 1) + (rows * 9); i += 9)
        getInventory().setItem(i, fillItem);
        }
    
    }
